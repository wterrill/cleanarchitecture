// Mocks generated by Mockito 5.0.14 from annotations
// in will_terrill_based_on_resocoder_clean_architecture_tdd_course/test/features/zipcode_info/data/repositories/zipcode_info_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:will_terrill_based_on_resocoder_clean_architecture_tdd_course/core/network/network_info.dart'
    as _i6;
import 'package:will_terrill_based_on_resocoder_clean_architecture_tdd_course/features/zipcode_info/data/datasources/zipcode_info_local_data_source.dart'
    as _i3;
import 'package:will_terrill_based_on_resocoder_clean_architecture_tdd_course/features/zipcode_info/data/datasources/zipcode_info_remote_data_source.dart'
    as _i5;
import 'package:will_terrill_based_on_resocoder_clean_architecture_tdd_course/features/zipcode_info/data/models/zipcode_info_model.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeZipcodeInfoModel_0 extends _i1.Fake implements _i2.ZipcodeInfoModel {
}

/// A class which mocks [ZipcodeInfoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockZipcodeInfoLocalDataSource extends _i1.Mock
    implements _i3.ZipcodeInfoLocalDataSource {
  MockZipcodeInfoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ZipcodeInfoModel> getLastZipcodeInfo() =>
      (super.noSuchMethod(Invocation.method(#getLastZipcodeInfo, []),
              returnValue:
                  Future<_i2.ZipcodeInfoModel>.value(_FakeZipcodeInfoModel_0()))
          as _i4.Future<_i2.ZipcodeInfoModel>);
  @override
  _i4.Future<bool> cacheZipcodeInfo(_i2.ZipcodeInfoModel? infoToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheZipcodeInfo, [infoToCache]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ZipcodeInfoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockZipcodeInfoRemoteDataSource extends _i1.Mock
    implements _i5.ZipcodeInfoRemoteDataSource {
  MockZipcodeInfoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ZipcodeInfoModel> getFixedZipcodeInfo(int? zipcode) =>
      (super.noSuchMethod(Invocation.method(#getFixedZipcodeInfo, [zipcode]),
              returnValue:
                  Future<_i2.ZipcodeInfoModel>.value(_FakeZipcodeInfoModel_0()))
          as _i4.Future<_i2.ZipcodeInfoModel>);
  @override
  _i4.Future<_i2.ZipcodeInfoModel> getRandomZipcodeInfo() =>
      (super.noSuchMethod(Invocation.method(#getRandomZipcodeInfo, []),
              returnValue:
                  Future<_i2.ZipcodeInfoModel>.value(_FakeZipcodeInfoModel_0()))
          as _i4.Future<_i2.ZipcodeInfoModel>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  String toString() => super.toString();
}
